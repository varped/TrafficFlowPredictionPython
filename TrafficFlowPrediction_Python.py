# -*- coding: utf-8 -*-
"""Speed Project - Traffic Flow Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16plQz0yQ0029JHO43mi-nrg2lkJNoUCL
"""

import pandas as pd
import streamlit as st
from google.colab import files
uploaded = files.upload("TrafficDataset.csv") #uploaded as a dictionary

data = pd.read_csv(list(uploaded.keys())[0]) #converting data into a dataframe
data.head()

data = data.dropna() #remove all the rows with NA values (in this case, there are no NA values in the original dataset)

#Find unique
data['Time'].unique()

# Convert 'Time' to minutes
data['Time'] = pd.to_datetime(data['Time'], format='%I:%M:%S %p').dt.hour * 60 + pd.to_datetime(data['Time'], format='%I:%M:%S %p').dt.minute
data['Time'].unique()

from sklearn.preprocessing import LabelEncoder
traffic_LabelEncoder = LabelEncoder()
data['Traffic Situation'] = traffic_LabelEncoder.fit_transform(data['Traffic Situation'])

import seaborn as sb
import matplotlib.pyplot as plt

sb.lineplot(data = data, x = 'Time', y = 'CarCount', label = 'Car Count')
sb.lineplot(data = data, x = 'Time', y = 'BusCount', label = 'Bus Count')
sb.lineplot(data = data, x = 'Time', y = 'BikeCount', label = 'Bike Count')
sb.lineplot(data = data, x = 'Time', y = 'TruckCount', label = 'Truck Count')
plt.title('Different Vehicle Counts over Time')
plt.xlabel('Time of Day(minutes)')
plt.ylabel('Count')
plt.legend(fontsize = 8)

#The graph shows traffic patterns for each vehicle over time. There are two peak
#times for cars: morning and evening. Buses and bikes follow a similar trend,
#just at a much lower frequency. Trucks are unique, being the only vehicle that
#have peak times during other vehicles' off times.

sb.boxplot(data = data, x = 'Day of the week', y = 'Total')
plt.title('Total Vehicle Count Each Day of the Week')
plt.ylabel('Total Vehicle Count')
#This is a total vehicle count against the days of the week. All days are
#relatively similar, with approximately similar averages, ranges, and IQRs.
#Friday has the lowest average vehicle count. From experience, Fridays are
#generally the days that people choose to work from home or take the day off.

# Inspect the raw 'Date' column
print("Raw Date Data:")
print(data['Date'].head(10))

# Convert 'Date' to datetime format (dd-mm-yyyy)
data['Date'] = pd.to_datetime(data['Date'], format='%d-%m-%Y', errors='coerce')

# Check for any missing values or incorrect parsing
print("\nConverted Date Data:")
print(data['Date'].head(10))
print("Missing values in 'Date':", data['Date'].isna().sum())

# Convert to days since a reference date
reference_date = pd.Timestamp('2023-10-09')
data['Date'] = (data['Date'] - reference_date).dt.days

# Verify the final result
print("\nFinal Date Data:")
print(data.dtypes)
print(data.head())
print(data.tail())

from sklearn.preprocessing import LabelEncoder

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Convert 'Traffic Situation' to numerical values
data['Traffic Situation'] = label_encoder.fit_transform(data['Traffic Situation'])
data['Day of the week'] = label_encoder.fit_transform(data['Day of the week'])

plt.figure(figsize=(10, 8))
correlation_matrix = data.corr()
sb.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

#This chart displays the correlation between two variables. The number of cars
#significantly impacts the total number of vehicles on the road. As the number
#of cars increases, the total vehicle count is very likely to increase. The
#number of vehicles significantly impacts the traffic situation. As the number
#of vehicles increases, the traffic situation is likely to decrease. In this
#case, a low value for traffic situation corresponds to higher levels of traffic.

sb.pairplot(data[['Time', 'Day of the week', 'CarCount', 'BikeCount', 'BusCount', 'TruckCount', 'Total', 'Traffic Situation']])
#The graph shows the relationships between different variables within the
#traffic dataset. Each plot represents the relationship between two variables.
#The scatter plots are used to show the relationship between two variables and
#the histograms show the distribution for each variable. From the subplots, we
#can observe a positive correlation between CarCount and BikeCount. The graph is
#clearly positive and linear, showing that an increase in CarCount causes a rise
#in BikeCount. We can also observe a negative correlation between TruckCount and
#Traffic Situation. Looking at the downward trend from this plot, it suggests
#that as TruckCount increases, the Traffic Situation is likely to decrease.
#Lastly, we can observe no clear relationship between Time and Traffic Situation.
#The scatter plot represents a random distribution of points, showing there is
#no strong correlation between the two variables.

data['Traffic Situation'] = pd.Categorical(data['Traffic Situation']).codes
plt.figure(figsize=(12, 6))
avg_traffic_by_time = data.groupby('Time')['Traffic Situation'].mean()
sb.lineplot(x=(avg_traffic_by_time.index), y=avg_traffic_by_time.values)
plt.title('Average Traffic Situation by Time of Day(Minutes)')
plt.xlabel('Time of Day(Minutes)')
plt.ylabel('Average Traffic Situation')
plt.xticks(rotation=45)
plt.show()
# The graph below shows the average traffic situation by the time of day in
# minutes. We can also observe two peak times for traffic, one around 420 minutes
# which is around 7 AM, and another peak time around 1020 minutes, which is around
# 5 PM. This makes sense because there this the normal time for adults to go to and
# leave work.

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report



# Encoding categorical features
le = LabelEncoder()
data['Day of the week'] = le.fit_transform(data['Day of the week'])
data['Traffic Situation'] = le.fit_transform(data['Traffic Situation'])

# Select features and target
X = data[['Time', 'Day of the week', 'CarCount', 'BikeCount', 'BusCount', 'TruckCount', 'Date']]
y = data['Traffic Situation']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train RandomForestClassifier model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))

# The confusion matrix shows how well our model predicts the accurate frequency of
# each type of vehicle. The entries on the main diagonal shows how many number of
# correctly identified vehicles and the entries not on the main diagonal shows the
# frequency of mispredicted vehicles. Since the only a total of 28 vehicles were
# misidentified, this model predicts the true frequecncy of vehicle type pretty well
# as supported by the  accuracy score of 0.953.

# Feature Importance
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
feature_importances.nlargest(10).plot(kind='barh')
plt.title('Feature Importance')
plt.show()
# This graph is a feature importance graph which shows how important each feature
# is to the prediction model. As we can see, cars have the most effect on the traffic
# situation and the day of week has the least importance. This is supported by our
# boxplot and our line plot for vehicle counts over time. The boxplot showed that the
# days of the week all have similar vehicle count, meaning the day of week doesn't
# really affect our model. However, the line plot shows how significant the car count
# is to traffic, and both these findings are supported by the feature importance graph.